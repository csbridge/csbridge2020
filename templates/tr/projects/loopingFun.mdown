template: templates/tr/projects/projectTemplate.ptl
title: Eğlenceli Döngüler
credit: Lisa Yan
translation: Serhat Arslan, Demet Tümkaya

Bu programlar Python'da döngülere alışmanız için pratiklerdir. Kolaydan zora doğru sıralanmışlardır.

## Döngü Hatırlatmaları
`for` döngüsünün genel özelliklerini hatırlayalım:

```
for i in range(15):
    # some code...
```

Yukarıdaki döngü 15 tekrar yapar. Bir `for` döngüsünün anlamını ilk satırdan çözebilirsiniz:

+ Bir sayaç değişkeni 'i' tanımlayın
+ Döngünün her tekrarında, i'yi 0 ile 15 aralığında (15 hariç) bulunan bir sonraki sayı olarak atayın. Bir başka deyişle, ilk tekrarda 'i' 0'a eşittir, bir sonrakinde 'i' 1'dir, ve bu şekilde devam eder, son tekrarda ise 'i' 14 olacaktır.
+ 'i' nin her değeri için, döngünün içindeki kod çalışacaktır. Döngü kodunu çalıştırırken, i'nin değerinin kullanabilirsiniz. Örneğin, döngünün ilk çalışmasında, 'i'nin değeri 0'dır.
+ Siz 'i'yi döngü içinde değiştirseniz bile, bir sonraki tekrarda 'i' yine belirtilen aralıkta bulunan bir sonraki sayıya eşit olacaktır. Örnek olarak:

```
for i in range(10):
    i += 2
    print(i)
```

Bu döngünün ilkinde, 'i' 0 olacaktır, ve 2 sayısı yazdırılacaktır. Fakat, döngünün ikinci tekrarında `i` 1 olacaktır. Her döngü tekrarında bunu düşününün, 'i'nin değerinin güncel olarak ne olduğundan bağımsız olarak; `i`, belirtilen aralıkta bulunan bir sonraki sayıya tekrar atanacaktır.

That being said, it may be easier to follow if you create another variable instead of changing the loop variable:

```
for i in range(10):
    j = i + 2  # i'nin değerini değiştirmez
    print(j)
```

Aşağıdaki örnek, sayaç 'i'yi 'for' döngüsü içinde kullanmakla ilgilidir:

**İpucu:** Döngü problemlerinde, bir döngü sayacının değerinin, size neyi yapmanızı söylediğini düşünün. Mesela, aşağıdaki ilk problemde,"i, 0 olduğunda, 1 sayısını yazdırmak istiyorum; i,1 olduğunda, 3 sayısını yazdırmak istiyorum; i, 2 olduğunda, 5 sayısını yazdırmak istiyorum vb." gibi düşünebiliriz.
{: class="alert alert-info"}

## Eğlenceli Döngüler 1
Aşağıdaki çıktıyı bir 'for' döngüsü ile elde etmeyi deneyin. 1'den başlayarak ilk 10 tek sayıyı yazdırın.

```
1'den başlayarak ilk 10 tek sayıyı yazdıralım.
1
3
5
7
9
11
13
15
17
19
```

Ekleme: Şimdi 0'dan başlarak ilk 10 çift sayıyı yazdırmayı deneyin.

## Eğlenceli Döngüler 2
Aşağıdaki çıktıyı bir 'for' döngüsü ile elde etmeyi deneyin. İlk 10 çift sayıyı azalan sırayla yazdırın.

```
20'den başlayıp 2'ye kadar, ilk 10 çift sayıyı azalan sırayla yazdıralım.
20
18
16
14
12
10
8
6
4
2
```

Bu problemi, önceki problemdeki döngü şartını değiştirmeden çözebilir misiniz? Aşağıdaki, 'for' döngüsü kodunu yazarak başlayın:

```
for i in range(10):
	# some code...
```

Bu problemi aşağıdaki döngüyü kullanarak nasıl çözerdiniz?

```
for i in range(20):
	# some code...
```

## Eğlenceli Döngüler 3
'for' döngüsü kullanın, fakat her şeyi tek bir satıra yazdırın. `print()` kullanırsanız herhangi bir yeni yazdırmada otomatik olarak diğer satıra geçecektir. Bu şekilde yapmamak için, parantezleri kapatmadan hemen önce `end=''` ekleyin. Örneğin, `print("yazılar veya değişkenler...")` yeni bir satır eklerken, `print("yazılar veya değişkenler...", end='')` eklemez.

1'den başlayarak tam kare sayıları yazdırın.

```
1'den başlayarak, ilk 10 tam kare sayıyı tek bir satıra yazdıralım.
1, 4, 9, 16, 25, 36, 49, 64, 81, 100
```

En sondaki tam sayıdan sonra virgül eklemektan kaçının!

## Ek Çalışmalar: `while` Döngüleri
'while' döngüleriyle ilgili daha çok pratik mi istiyorsunuz? Yukarıdaki tüm alıştırmaları, 'for' yerine 'while' döngüsü ile yapmayı deneyin. Bol şans!
